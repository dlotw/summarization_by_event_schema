# Class to represent schema

class Schema:

    def __init__(self):
        self.schema_id = -1
        # a list of Rule object(see below)
        # represent all the rules in event_schema
        self.rule_list = []

    def setSchemaId(self, value):
        self.schema_id = value

    def loadSchema(self, line_for_rules):
        '''
        Given a list of strings, each string represent one rule in the schema
        :param line_for_rules: a list of strings
        :return:
        '''

        for r in line_for_rules:
            new_rule = Rule()
            new_rule.loadRule(r.rstrip("\n").split('\t')[2:])
            self.rule_list.append(new_rule)

    def matchSentence(self, sentence):
        '''
        A sentence to match to this schema
        :param sentence: Sentence to be matched
        :return:
        '''


# Rule represent one line of the event schema
# One rule in event schema
class Rule:

    def __init__(self):
        # instance for arg1
        self.arg1_ins = []
        self.arg1 = ""
        self.rel = ""
        self.arg2 = ""
        self.arg2_ins = []

    def loadRule(self, tuple_five):
        '''
        Given one string, which is one line in schema.txt
        generate Rule by using this funcion
        :param tuple_five: a five element list (generated by Schema's load_schema function)
        :return: None, just used for initiate the class
        '''
        self.arg1_ins = tuple_five[0]
        self.arg1 = tuple_five[1]
        self.rel = tuple_five[2]
        self.arg2 = tuple_five[3]
        self.arg2_ins = tuple_five[4]




if __name__ == "__main__":
    schemas = {}

    f = open("chosen_schema")
    content = f.readlines()
    f.close()

    schema_id = -1
    schema_lines = []
    for line in content:
        kk = line.split('\t')
        if int(kk[1]) == schema_id:
            #still the last schema
            schema_lines.append(line)
        else:
            #a new schema is tested
            # create a schema add it to schemas
            if len(schema_lines) != 0:
                new_schema = Schema()
                new_schema.loadSchema(schema_lines)
                schemas[schema_id] = new_schema

            # clear the schema_lines
            schema_lines = [line]
            schema_id = int(kk[1])





